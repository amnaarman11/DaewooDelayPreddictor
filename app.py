# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1utS6oBXDhIWVyLKS2tTOEXpRh9Wjwo8U
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import requests
from datetime import datetime

# ============ CONFIG ============
st.set_page_config(page_title="Daewoo Bus Delay Predictor", page_icon="üöå", layout="centered")

# --- Title ---
st.title("üöå Daewoo Bus Delay Prediction")
st.markdown("Predict whether your Daewoo trip might face a delay based on route, time, and weather conditions.")

# --- Load Model ---
@st.cache_resource
def load_model():
    try:
        return joblib.load("model.pkl")
    except Exception as e:
        st.error("‚ùå Model file not found. Please train your model and save it as `model.pkl`.")
        st.stop()

model = load_model()

# --- Get Live Weather from OpenWeather ---
def get_live_weather(city_name, api_key):
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={api_key}&units=metric"
        response = requests.get(url)
        data = response.json()
        if "weather" in data:
            condition = data["weather"][0]["main"]
            temp = data["main"]["temp"]
            return condition, temp
        else:
            return "Clear", None
    except Exception:
        return "Clear", None

# --- API key for weather (get one from openweathermap.org) ---
OPENWEATHER_API_KEY = "your_api_key_here"

# --- Input Form ---
st.header("üßæ Trip Details")

col1, col2 = st.columns(2)
with col1:
    origin = st.text_input("Origin City", "Lahore")
    departure_time = st.time_input("Departure Time")
with col2:
    destination = st.text_input("Destination City", "Islamabad")
    travel_date = st.date_input("Travel Date", datetime.today())

use_live_weather = st.checkbox("Use Live Weather Data", value=True)

if use_live_weather:
    condition, temperature = get_live_weather(origin, OPENWEATHER_API_KEY)
    st.info(f"üå§Ô∏è Current weather in {origin}: **{condition}**, {temperature}¬∞C" if temperature else f"üå§Ô∏è Current weather: {condition}")
else:
    condition = st.selectbox("Weather Condition", ["Clear", "Rainy", "Foggy"])

# --- Feature Preprocessing ---
def preprocess_input(origin, destination, departure_time, weather):
    dep_hour = departure_time.hour
    dep_min = departure_time.minute

    features = {
        "Origin": [origin.lower()],
        "Destination": [destination.lower()],
        "Dep_Hour": [dep_hour],
        "Dep_Min": [dep_min],
        "Weather_Clear": [1 if weather == "Clear" else 0],
        "Weather_Rainy": [1 if weather == "Rainy" else 0],
        "Weather_Foggy": [1 if weather == "Foggy" else 0],
    }
    return pd.DataFrame(features)

# --- Prediction Button ---
if st.button("üö¶ Predict Delay"):
    with st.spinner("Predicting delay..."):
        input_df = preprocess_input(origin, destination, departure_time, condition)
        try:
            delay = model.predict(input_df)[0]
            st.success(f"üïí Predicted Delay: **{delay:.2f} minutes**")

            # --- Suggestion logic ---
            if delay > 30:
                st.error("‚ö†Ô∏è High delay expected ‚Äî consider leaving earlier or taking the next bus.")
            elif delay > 10:
                st.warning("‚ö†Ô∏è Moderate delay expected.")
            else:
                st.balloons()
                st.success("‚úÖ Low chance of delay ‚Äî your trip should be on time!")

        except Exception as e:
            st.error(f"Prediction failed: {e}")